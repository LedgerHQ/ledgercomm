name: Python install and deployment

on:
  workflow_dispatch:
  push:
    tags:
      - '*'
    branches:
      - master
  pull_request:
    branches:
      - master

permissions:
  id-token: write
  attestations: write

jobs:
  install:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11', '3.12', '3.13']
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Installing the package & run the exec
        run: |
          pip install .
          ledgercomm-send --help

  deploy:
    name: Build the Python package and deploy if needed
    needs: [install]
    runs-on: public-ledgerhq-shared-small

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          python -m pip install pip --upgrade
          pip install build twine packaging -U

      - name: Build Python package
        run: |
          python -m build
          twine check dist/*
          echo "TAG_VERSION=$(python -c 'from ledgercomm import __version__; print(__version__)')" >> "$GITHUB_ENV"

      - name: Check version against CHANGELOG
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          CHANGELOG_VERSION=$(grep -Po '(?<=## \[)(\d+\.)+[^\]]' CHANGELOG.md | head -n 1)
          if [ "${{ env.TAG_VERSION }}" == "${CHANGELOG_VERSION}" ]; \
          then \
              exit 0; \
          else \
              echo "Tag '${{ env.TAG_VERSION }}' and CHANGELOG '${CHANGELOG_VERSION}' versions mismatch!"; \
              exit 1; \
          fi

      - name: Publish Python package
        if: success() && github.event_name == 'push'
        run: python -m twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PUBLIC_API_TOKEN  }}
          TWINE_NON_INTERACTIVE: 1

      - name: Login to Ledger Artifactory
        if: success() && github.event_name == 'push'
        timeout-minutes: 10
        id: jfrog-login
        uses: LedgerHQ/actions-security/actions/jfrog-login@actions/jfrog-login-1

      - name: Publish Python package on Ledger Artifactory
        if: success() && github.event_name == 'push'
        run: python -m twine upload dist/*
        env:
          TWINE_REPOSITORY_URL: https://jfrog.ledgerlabs.net/artifactory/api/pypi/embedded-apps-pypi-prod-green
          TWINE_USERNAME: ${{ steps.jfrog-login.outputs.oidc-user }}
          TWINE_PASSWORD: ${{ steps.jfrog-login.outputs.oidc-token }}
          TWINE_NON_INTERACTIVE: 1

      - name: Generate library build attestations
        if: success() && github.event_name == 'push'
        timeout-minutes: 10
        uses: LedgerHQ/actions-security/actions/attest@actions/attest-1
        with:
          subject-path: dist/*

      - name: Sign library artifacts
        if: success() && github.event_name == 'push'
        timeout-minutes: 10
        uses: LedgerHQ/actions-security/actions/sign-blob@actions/sign-blob-1
        with:
          path: dist

      - name: Publish a release on the repo
        if: success() && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          automatic_release_tag: "v${{ env.TAG_VERSION }}"
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: true
          files: |
            LICENSE
            dist/
