name: Python checks and deployment

on:
  workflow_dispatch:
  push:
    tags:
      - '*'
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
      - develop

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8, 3.9, '3.10']
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python3 -m pip install pip setuptools --upgrade
          if [ -f requirements-dev.txt ]; then python3 -m pip install -r requirements-dev.txt; fi
      - name: Pycodestyle (PEP 8 - 257)
        run: |
          python3 -m pycodestyle ledgercomm/
      - name: Pylint
        run: |
          python3 -m pylint --disable=W0511 --rcfile=setup.cfg ledgercomm/ # disable TODO (fixme): W0511

  yapf:
    name: Python formatting
    runs-on: ubuntu-latest
    steps:
      - name: Clone
        uses: actions/checkout@v3
      - name: Install dependencies
        run: pip install yapf
      - name: Yapf source formatting
        run: yapf ledgercomm --recursive -d

  mypy:
    name: Python type checking
    runs-on: ubuntu-latest
    steps:
      - name: Clone
        uses: actions/checkout@v3
      - name: Install dependencies
        run: pip install mypy types-setuptools types-requests
      - name: Mypy type checking
        run: mypy ledgercomm

  bandit:
    name: Security checking
    runs-on: ubuntu-latest
    steps:
      - name: Clone
        uses: actions/checkout@v3
      - name: Install dependencies
        run: pip install bandit
      - name: Bandit security checking
        run: bandit -r ledgercomm -ll

  deploy:
    name: Build the Python package and deploy if needed
    needs: [lint, yapf, mypy, bandit]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          python -m pip install pip --upgrade
          pip install build twine

      - name: Build Python package
        run: |
          python -m build
          twine check dist/*
          echo "TAG_VERSION=$(python -c 'from ledgercomm import __version__; print(__version__)')" >> "$GITHUB_ENV"

      - name: Display current status
        run: |
          echo "Current status is:"
          if [[ ${{ github.ref }} == "refs/tags/"* ]]; \
          then \
              echo "- Triggered from tag, will be deployed on pypi.org"; \
          else \
              echo "- Not triggered from tag, will be deployed on test.pypi.org"; \
          fi
          echo "- Tag version: ${{ env.TAG_VERSION }}"

      - name: Check version against CHANGELOG
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          CHANGELOG_VERSION=$(grep -Po '(?<=## \[)(\d\.)+[^\]]' CHANGELOG.md | head -n 1)
          if [ "${{ env.TAG_VERSION }}" == "${CHANGELOG_VERSION}" ]; \
          then \
              exit 0; \
          else \
              echo "Tag '${{ env.TAG_VERSION }}' and CHANGELOG '${CHANGELOG_VERSION}' versions mismatch!"; \
              exit 1; \
          fi

      - name: Publish Python package on test.pypi.org
        if: |
          success() &&
          github.event_name == 'push' &&
          !startsWith(github.ref, 'refs/tags/')
        run: python -m twine upload --repository testpypi dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_PUBLIC_API_TOKEN  }}
          TWINE_NON_INTERACTIVE: 1

      - name: Publish Python package on pypi.org
        if: |
          success() &&
          github.event_name == 'push' &&
          startsWith(github.ref, 'refs/tags/')
        run: python -m twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PUBLIC_API_TOKEN  }}
          TWINE_NON_INTERACTIVE: 1

      - name: Publish a release on the repo
        if: |
          success() &&
          github.event_name == 'push' &&
          startsWith(github.ref, 'refs/tags/')
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          automatic_release_tag: "v${{ env.TAG_VERSION }}"
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: true
          files: |
            LICENSE
            dist/
